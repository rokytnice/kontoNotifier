package org.rochlitz.kontoNotifier;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;
import javax.ejb.Singleton;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.enterprise.inject.Instance;
import javax.inject.Inject;

import org.rochlitz.kontoNotfier.persistence.AllDAO;
import org.rochlitz.kontoNotfier.persistence.NotifierDTO;

import com.packtpub.wflydevelopment.chapter12.external.NotfierCallableTask;

/**
 * @author aroc
 *
 *         reads nots from db and put them to queue and waits until queue has
 *         mor space or time is for next sceduling
 * @param <NotfierCallableTask>
 * 
 */

@Singleton
public class NotifierProcessor {

	private final Queue<Long> seats = new ConcurrentLinkedQueue<>();
	@Resource
	private ManagedExecutorService executorService;
	@Inject
	private Instance<NotfierCallableTask> databaseCollector;

//	@Inject
//	private Logger logger;

	@Inject
	private	AllDAO	dao;	
	
	public void startProcessing() {
		try {
			
			List<Long> notIds = dao.getAllIDs(  new NotifierDTO() );
			List notsTask = new ArrayList<NotfierCallableTask>();
			
			while(notIds.iterator().hasNext()){
				notsTask.add( new NotfierCallableTask(  notIds.iterator().next()  )   ) ;
				
			}
			
			List<Future<List<Integer>>> futures = executorService	.invokeAll( notsTask );

		} catch (Exception e) {
//			logger.log(Level.SEVERE, e.getMessage(), e);
		}
	}

	private List<Integer> get(Future<List<Integer>> future) {
		try {
			return future.get();
		} catch (InterruptedException | ExecutionException e) {
//			logger.log(Level.SEVERE, e.getMessage(), e);
			return new ArrayList<>();
		}
	}

}
